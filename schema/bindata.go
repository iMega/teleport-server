// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcf\x4e\xf2\x40\x14\xc5\xf7\xf3\x14\xb7\x61\xc3\xf7\x0a\x5d\x7e\x61\xc3\xe2\xfb\xa2\x51\x1f\x60\x32\xbd\x4a\x03\x9d\xc1\xe9\x40\x42\x0c\x09\x36\xae\xd4\x67\x70\xa1\x2f\x50\x51\x12\x84\xc0\x33\x9c\x79\x23\x33\xfd\xa3\x90\xb0\xe9\x6d\x73\xef\x39\xbf\xd3\x93\xab\x01\x67\x92\xee\x04\xd1\xed\x84\xed\x2c\xa6\xf3\x30\x04\x51\x36\x71\xd2\xa5\x46\xc7\xf4\xaf\x79\x13\x73\x21\xdc\x6c\xcc\xf5\x49\xa5\xd1\x26\xe1\x6e\x9a\xc4\xd4\xef\x45\x7f\x62\xfa\x6f\x12\x8e\x04\x91\x1a\xb0\x1a\x5e\x9a\x21\xeb\xae\x0b\xcf\x98\x2e\x9c\x4d\xf5\x4d\xb8\xb9\xca\xd9\x46\xc1\xaa\x43\x78\xc1\xbb\x7f\xc4\x0a\x1b\x5f\x90\xbf\xa7\x7e\x4f\xa4\xda\xb1\xbd\x96\x8a\x2b\xaf\x8a\xd1\xd8\x37\x92\x57\xec\xb1\x44\xe9\x17\x84\x25\x61\x83\xd2\x17\x28\xb1\xc5\x1e\x1f\x58\xd5\xf1\xce\xac\x49\x26\xca\x51\x9a\x8d\x47\x9c\xb1\x76\xf9\xaf\x59\x87\xf0\x86\x1d\xd6\x41\x89\xad\x7f\xc6\xce\x3f\xe1\x8b\xb0\xc6\x27\x56\xd8\xf9\x02\x6b\xff\x50\xaf\x7d\x81\xbd\x5f\x50\x18\x35\x11\xe5\x71\x9a\x0a\xd6\x96\x53\xb9\x2b\xcb\xd2\x71\xc3\x8f\xdb\x20\xa1\x11\xcb\x99\x99\xb6\x9b\x83\xc6\xfe\x1a\x33\x62\xa9\x23\xf1\xa3\x0e\xfd\x74\xc7\x32\xcf\x4f\x96\x56\x31\xc3\xd7\xc9\xbf\x6b\xc3\x11\x1d\x19\x08\x22\xa9\x5c\x3a\xe5\x03\xde\x5c\x7c\x07\x00\x00\xff\xff\x5e\xd5\x01\x5a\xfb\x01\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 507, mode: os.FileMode(420), modTime: time.Unix(1528871652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

