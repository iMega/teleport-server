// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x50\x4d\x4e\xc2\x40\x14\xde\xcf\x29\x5e\xc3\x06\x13\x4f\xd0\xa5\x61\xc3\x42\xa3\x51\x0f\xd0\x4c\x9f\xd2\x40\x67\x70\x3a\x90\x10\x43\x82\x8d\x2b\xf5\x0c\x2e\xf4\x02\x15\x25\x41\x08\x9c\xe1\x9b\x1b\x99\xe9\x0f\x42\x74\x33\xef\x25\xef\xfb\x9b\x2f\x93\x3d\x4e\x23\xba\x17\x44\x77\x23\x36\x93\x90\x2e\xfc\x10\x44\xe9\xc8\x46\x36\xd1\x2a\xa4\xd3\x7a\x13\x53\x21\xec\x64\xc8\x15\xa4\xe4\x28\x1d\x73\x3b\x89\x43\xea\x76\x82\xa3\x90\xce\x74\xcc\x81\x20\x92\x3d\x96\xfd\x2b\xdd\x67\xd5\xb6\xfe\x0d\xe9\xd2\x9a\x44\xdd\x7a\xcc\x75\xc6\x26\xf0\x52\x2d\xc2\x2b\x3e\xdc\x13\x16\x58\xb9\x9c\xdc\x03\x75\x3b\x22\x51\x96\xcd\x4d\x24\xb9\xd4\x2a\x3d\x6a\xf9\x9a\xf2\x86\x2d\xe6\x28\xdc\x8c\x30\x27\xac\x50\xb8\x1c\x05\xd6\xd8\xe2\x13\x8b\x2a\xde\xb9\xd1\xf1\x48\x5a\x4a\xd2\xe1\x80\x53\x56\x36\xfb\x15\x6b\x11\xde\xb1\xc1\xd2\x33\xb1\x76\x2f\xd8\xb8\x67\x7c\x13\x96\xf8\xc2\x02\x1b\x97\x63\xe9\x1e\xab\xb3\xcb\xb1\x75\x33\xf2\xa3\x72\x44\x71\x98\xa6\x34\x6b\xca\x29\xd5\xa5\xe1\xc8\x72\xed\x1f\x36\x41\x7c\x23\x86\x53\x3d\x6e\x2e\x7b\x8d\x9d\x68\x3d\xe0\x48\x05\x62\xc7\xf6\xfd\xb4\x87\x51\x96\xfd\x2d\xad\x81\x54\xcd\xd6\x22\xc7\x74\x08\x6e\x96\x5d\x42\xcf\xfd\xb7\x8b\xe6\x2b\x74\xa8\x20\x88\x22\x69\x93\x31\xef\xa5\x9b\x8a\x9f\x00\x00\x00\xff\xff\x11\x51\xf8\xf6\x29\x02\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 553, mode: os.FileMode(420), modTime: time.Unix(1528955847, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

